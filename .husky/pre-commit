#!/bin/sh

# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîç Running pre-commit checks...${NC}"

# Store the root directory
ROOT_DIR=$(git rev-parse --show-toplevel)
EXIT_CODE=0

# Check if committing to master branch
CURRENT_BRANCH=$(git symbolic-ref --short HEAD)
if [ "$CURRENT_BRANCH" = "master" ] || [ "$CURRENT_BRANCH" = "main" ]; then
  echo -e "${RED}‚ùå Direct commits to master/main branch are not allowed.${NC}"
  echo "Please create a feature branch and submit a pull request instead."
  exit 1
fi

# Run secret detection script
if [ -f "$ROOT_DIR/.husky/detect-secrets.sh" ]; then
  echo -e "${BLUE}üîê Scanning for sensitive information...${NC}"
  chmod +x "$ROOT_DIR/.husky/detect-secrets.sh"
  "$ROOT_DIR/.husky/detect-secrets.sh"
  SECRETS_EXIT_CODE=$?
  if [ $SECRETS_EXIT_CODE -ne 0 ]; then
    echo -e "${RED}‚ùå Sensitive information detected in staged files.${NC}"
    echo "Please remove any sensitive data before committing."
    EXIT_CODE=$SECRETS_EXIT_CODE
  else
    echo -e "${GREEN}‚úÖ No sensitive information detected.${NC}"
  fi
fi

# Fix long lines (>120 characters) 
# if [ -f "$ROOT_DIR/.husky/fix-long-lines.sh" ]; then
#   echo -e "${BLUE}üßπ Fixing lines longer than 120 characters...${NC}"
#   chmod +x "$ROOT_DIR/.husky/fix-long-lines.sh"
#   "$ROOT_DIR/.husky/fix-long-lines.sh"
#   LONG_LINES_EXIT_CODE=$?
#   if [ $LONG_LINES_EXIT_CODE -ne 0 ]; then
#     echo -e "${YELLOW}‚ö†Ô∏è Some long lines could not be automatically fixed.${NC}"
#     echo "Please review and fix them manually."
#   else
#     echo -e "${GREEN}‚úÖ Long lines fixed successfully.${NC}"
#   fi
# fi

# Fix known ESLint errors
if [ -f "$ROOT_DIR/.husky/fix-eslint-errors.sh" ]; then
  echo -e "${BLUE}üõ†Ô∏è Applying automated ESLint fixes...${NC}"
  chmod +x "$ROOT_DIR/.husky/fix-eslint-errors.sh"
  "$ROOT_DIR/.husky/fix-eslint-errors.sh"
fi

# Run complete validation with local-ci.js
echo -e "${BLUE}üß™ Running comprehensive validation...${NC}"
cd "$ROOT_DIR" && npm run ci
VALIDATION_EXIT_CODE=$?
if [ $VALIDATION_EXIT_CODE -ne 0 ]; then
  echo -e "${RED}‚ùå Validation failed. Please fix the issues before committing.${NC}"
  EXIT_CODE=$VALIDATION_EXIT_CODE
else
  echo -e "${GREEN}‚úÖ Validation completed successfully.${NC}"
fi

# Check if there are any changes in GitHub workflow files
if git diff --cached --name-only | grep -q "\.github/workflows/"; then
  echo -e "${BLUE}üîç Checking GitHub workflow files...${NC}"
  # Check if there are ignored patterns for workflow validation
  if [ -f "$ROOT_DIR/.huskyignore" ]; then
    cd "$ROOT_DIR" && HUSKYIGNORE_FILE="$ROOT_DIR/.huskyignore" node .github/scripts/validate-workflows.js
  else
    cd "$ROOT_DIR" && node .github/scripts/validate-workflows.js
  fi
  WORKFLOW_EXIT_CODE=$?
  if [ $WORKFLOW_EXIT_CODE -ne 0 ]; then
    echo -e "${RED}‚ùå GitHub workflow validation failed.${NC}"
    EXIT_CODE=$WORKFLOW_EXIT_CODE
  else
    echo -e "${GREEN}‚úÖ GitHub workflow validation passed.${NC}"
  fi
fi

# Module-specific linting
check_module() {
  local module_path="$1"
  local module_name="$2"
  
  if git diff --cached --name-only | grep -q "$module_path/"; then
    echo -e "${BLUE}üîç Checking $module_name files...${NC}"
    cd "$ROOT_DIR/$module_path" && npm run lint --passWithNoTests
    local exit_code=$?
    if [ $exit_code -ne 0 ]; then
      echo -e "${RED}‚ùå $module_name linting failed with code $exit_code.${NC}"
      return $exit_code
    else
      echo -e "${GREEN}‚úÖ $module_name linting passed.${NC}"
      return 0
    fi
  fi
  return 0
}

# Check each module
check_module "api" "API"
API_EXIT_CODE=$?
[ $API_EXIT_CODE -ne 0 ] && EXIT_CODE=$API_EXIT_CODE

# Check web module with the custom fix script
if git diff --cached --name-only | grep -q "web/"; then
  echo -e "${BLUE}üîç Checking Web files...${NC}"
  if [ -f "$ROOT_DIR/.husky/fix-web-eslint.sh" ]; then
    chmod +x "$ROOT_DIR/.husky/fix-web-eslint.sh"
    "$ROOT_DIR/.husky/fix-web-eslint.sh"
    WEB_EXIT_CODE=$?
  else
    cd "$ROOT_DIR/web" && npm run lint
    WEB_EXIT_CODE=$?
  fi
  
  if [ $WEB_EXIT_CODE -ne 0 ]; then
    echo -e "${RED}‚ùå Web linting failed with code $WEB_EXIT_CODE.${NC}"
    EXIT_CODE=$WEB_EXIT_CODE
  else
    echo -e "${GREEN}‚úÖ Web linting passed.${NC}"
  fi
fi

check_module "mcp-server" "MCP-Server"
MCP_EXIT_CODE=$?
[ $MCP_EXIT_CODE -ne 0 ] && EXIT_CODE=$MCP_EXIT_CODE

# Check terraform files
if git diff --cached --name-only | grep -q "terraform/"; then
  echo -e "${BLUE}üîç Checking Terraform files...${NC}"
  cd "$ROOT_DIR/terraform" && terraform validate
  TERRAFORM_EXIT_CODE=$?
  if [ $TERRAFORM_EXIT_CODE -ne 0 ]; then
    echo -e "${RED}‚ùå Terraform validation failed.${NC}"
    EXIT_CODE=$TERRAFORM_EXIT_CODE
  else
    echo -e "${GREEN}‚úÖ Terraform validation passed.${NC}"
  fi
fi

# Final summary
if [ $EXIT_CODE -ne 0 ]; then
  echo -e "${RED}‚ùå Pre-commit checks failed.${NC}"
  echo "Please fix the issues before committing."
  echo "To bypass these checks (not recommended for a public repo): git commit --no-verify"
  exit $EXIT_CODE
else
  echo -e "${GREEN}‚úÖ All pre-commit checks passed successfully.${NC}"
fi

exit $EXIT_CODE
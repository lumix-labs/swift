name: Infrastructure and Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      skip_terraform:
        description: 'Skip Terraform steps'
        type: boolean
        default: false
      modules_to_deploy:
        description: 'Comma-separated list of modules to deploy (api,web)'
        type: string
        default: 'api,web'

jobs:
  terraform_plan:
    name: Terraform Plan
    if: ${{ !inputs.skip_terraform }}
    uses: ./.github/workflows/terraform-workflow.yml
    with:
      action: plan
    secrets:
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

  terraform_apply:
    name: Terraform Apply
    needs: terraform_plan
    if: ${{ !inputs.skip_terraform && github.ref == 'refs/heads/main' }}
    uses: ./.github/workflows/terraform-workflow.yml
    with:
      action: apply
    secrets:
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
      
  setup_ssm:
    name: Setup SSM Deployment
    runs-on: ubuntu-latest
    needs: [terraform_apply]
    if: ${{ always() && (inputs.skip_terraform || success()) }}
    outputs:
      instance_ip: ${{ steps.get-instance.outputs.instance_ip }}
      instance_id: ${{ steps.get-instance.outputs.instance_id }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Get Instance Information
        id: get-instance
        run: |
          # Make parse-params.sh executable
          chmod +x .github/scripts/parse-params.sh
          
          if [ "${{ inputs.skip_terraform }}" == "true" ]; then
            # Use INSTANCE_IP from secrets
            INSTANCE_IP="${{ secrets.INSTANCE_IP }}"
            
            # Get instance ID from IP
            if [ -n "$INSTANCE_IP" ]; then
              INSTANCE_ID=$(aws ec2 describe-instances \
                --filters "Name=public-ip-address,Values=$INSTANCE_IP" \
                --query "Reservations[0].Instances[0].InstanceId" \
                --output text)
              
              if [ "$INSTANCE_ID" == "None" ] || [ -z "$INSTANCE_ID" ]; then
                echo "Error: Could not find instance ID for IP $INSTANCE_IP"
                exit 1
              fi
            fi
          else
            # Get from Terraform outputs
            PARAMS='${{ needs.terraform_apply.outputs.infrastructure_params }}'
            INSTANCE_IP=$(.github/scripts/parse-params.sh "$PARAMS" "instance_ip")
            INSTANCE_ID=$(.github/scripts/parse-params.sh "$PARAMS" "instance_id")
          fi
          
          echo "Instance IP: $INSTANCE_IP"
          echo "Instance ID: $INSTANCE_ID"
          
          # Validate instance information
          if [ -z "$INSTANCE_ID" ] || [ "$INSTANCE_ID" == "null" ]; then
            echo "Error: Could not determine instance ID"
            exit 1
          fi
          
          # Save to outputs
          echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
      
      - name: Verify SSM Agent Status
        run: |
          INSTANCE_ID="${{ steps.get-instance.outputs.instance_id }}"
          
          # Check if instance is managed by SSM
          echo "Checking if instance $INSTANCE_ID is managed by SSM..."
          
          # Wait for up to 5 minutes for the instance to become managed
          for i in {1..30}; do
            IS_MANAGED=$(aws ssm describe-instance-information \
              --filters "Key=InstanceIds,Values=$INSTANCE_ID" \
              --query "InstanceInformationList[0].PingStatus" \
              --output text)
              
            if [ "$IS_MANAGED" == "Online" ]; then
              echo "Instance is successfully managed by SSM!"
              break
            fi
            
            if [ $i -eq 30 ]; then
              echo "Warning: Instance is not yet managed by SSM after 5 minutes."
              echo "Current status: $IS_MANAGED"
              echo "Will attempt to proceed anyway. Deployment may fail if SSM agent is not running."
            fi
            
            echo "Waiting for SSM agent to come online (attempt $i/30)..."
            sleep 10
          done
  
  deploy:
    name: Deploy Application
    needs: [setup_ssm]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
        
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Create docker-compose file
        run: |
          mkdir -p deploy
          
          # Create docker-compose.yml content
          cat > deploy/docker-compose.yml << EOL
          version: '3'

          services:
          EOL
          
          # Convert comma-separated modules to array
          IFS=',' read -ra MODULES <<< "${{ inputs.modules_to_deploy || 'api,web' }}"
          
          # Add each module to docker-compose
          for MODULE in "${MODULES[@]}"; do
            if [[ "$MODULE" == "api" ]]; then
              cat >> deploy/docker-compose.yml << EOL
            api:
              image: ${{ steps.login-ecr.outputs.registry }}/lumixlabs/swift-api:${{ github.sha }}
              ports:
                - "4000:4000"
              restart: always
              volumes:
                - /app/logs/api:/logs
              environment:
                - NODE_ENV=production
                - PORT=4000
              healthcheck:
                test: ["CMD", "wget", "--spider", "-q", "http://localhost:4000/healthcheck"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 10s
              networks:
                - swift-network
          EOL
            elif [[ "$MODULE" == "web" ]]; then
              cat >> deploy/docker-compose.yml << EOL
            web:
              image: ${{ steps.login-ecr.outputs.registry }}/lumixlabs/swift-web:${{ github.sha }}
              ports:
                - "3050:3050"
              restart: always
              volumes:
                - /app/logs/web:/logs
              environment:
                - NODE_ENV=production
                - PORT=3050
              healthcheck:
                test: ["CMD", "wget", "--spider", "-q", "http://localhost:3050/"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 10s
              networks:
                - swift-network
          EOL
            fi
          done
          
          # Add networks section
          cat >> deploy/docker-compose.yml << EOL

          networks:
            swift-network:
              driver: bridge
          EOL
      
      - name: Deploy using SSM
        run: |
          # Prepare SSM deployment
          chmod +x .github/scripts/ssm-deployment.sh
          
          # Set deployment environment variables
          export AWS_DEFAULT_REGION="${{ secrets.AWS_REGION }}"
          export AWS_ECR_REGISTRY="${{ steps.login-ecr.outputs.registry }}"
          
          # Prepare deployment variables
          INSTANCE_ID="${{ needs.setup_ssm.outputs.instance_id }}"
          
          echo "Deploying to instance $INSTANCE_ID..."
          
          # Move to deploy directory
          cd deploy
          
          # Run SSM deployment
          ../.github/scripts/ssm-deployment.sh "$INSTANCE_ID" "${{ secrets.AWS_REGION }}"
      
      - name: Verify Deployment
        run: |
          INSTANCE_ID="${{ needs.setup_ssm.outputs.instance_id }}"
          
          echo "Waiting for services to start..."
          sleep 30
          
          # Convert comma-separated modules to array
          IFS=',' read -ra MODULES <<< "${{ inputs.modules_to_deploy || 'api,web' }}"
          
          for MODULE in "${MODULES[@]}"; do
            if [[ "$MODULE" == "api" ]]; then
              echo "Checking API service..."
              
              aws ssm send-command \
                --instance-ids "$INSTANCE_ID" \
                --document-name "AWS-RunShellScript" \
                --parameters '{"commands":["cd /app && docker-compose ps api && curl -s http://localhost:4000/healthcheck || echo \"API service is not responding\""]}' \
                --query "Command.CommandId" \
                --output text
              
            elif [[ "$MODULE" == "web" ]]; then
              echo "Checking Web service..."
              
              aws ssm send-command \
                --instance-ids "$INSTANCE_ID" \
                --document-name "AWS-RunShellScript" \
                --parameters '{"commands":["cd /app && docker-compose ps web && curl -s http://localhost:3050/ | head -20 || echo \"Web service is not responding\""]}' \
                --query "Command.CommandId" \
                --output text
            fi
          done
          
          echo "Deployment verification complete"
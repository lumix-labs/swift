name: Deploy Application

on:
  workflow_call:
    inputs:
      deploymentParams:
        required: true
        type: string
        description: 'JSON string containing deployment parameters'
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true
      AWS_ACCOUNT_ID:
        required: true
      EC2_SSH_KEY:
        required: true
  workflow_dispatch:
    inputs:
      instance_ip:
        description: 'EC2 Instance IP'
        required: true
        type: string
      modules_to_deploy:
        description: 'Comma-separated list of modules to deploy (api,web)'
        required: true
        type: string

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
        
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Parse deployment parameters
        id: parse-params
        run: |
          if [ -n "${{ inputs.deploymentParams }}" ]; then
            # From workflow_call
            PARAMS='${{ inputs.deploymentParams }}'
            INSTANCE_IP=$(echo $PARAMS | jq -r '.instance_ip')
            MODULES_TO_DEPLOY=$(echo $PARAMS | jq -r '.modules_to_deploy')
          else
            # From workflow_dispatch
            INSTANCE_IP="${{ inputs.instance_ip }}"
            MODULES_TO_DEPLOY="${{ inputs.modules_to_deploy }}"
          fi
          
          # Validate instance_ip is not empty
          if [ -z "$INSTANCE_IP" ] || [ "$INSTANCE_IP" == "null" ]; then
            echo "Error: Instance IP is empty or null. Cannot proceed with deployment."
            echo "This usually happens when infrastructure outputs are not available."
            exit 1
          fi
          
          echo "instance_ip=${INSTANCE_IP}" >> $GITHUB_OUTPUT
          echo "modules_to_deploy=${MODULES_TO_DEPLOY}" >> $GITHUB_OUTPUT
      
      - name: Create docker-compose file
        run: |
          mkdir -p deploy
          
          # Create docker-compose.yml content
          cat > deploy/docker-compose.yml << EOL
          version: '3'

          services:
          EOL
          
          # Convert comma-separated modules to array
          IFS=',' read -ra MODULES <<< "${{ steps.parse-params.outputs.modules_to_deploy }}"
          
          # Add each module to docker-compose
          for MODULE in "${MODULES[@]}"; do
            if [[ "$MODULE" == "api" ]]; then
              cat >> deploy/docker-compose.yml << EOL
            api:
              image: ${{ steps.login-ecr.outputs.registry }}/lumixlabs/swift-api:${{ github.sha }}
              ports:
                - "4000:4000"
              restart: always
              volumes:
                - ./logs/api:/logs
              environment:
                - NODE_ENV=production
                - PORT=4000
              healthcheck:
                test: ["CMD", "wget", "--spider", "-q", "http://localhost:4000/healthcheck"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 10s
              networks:
                - swift-network
          EOL
            elif [[ "$MODULE" == "web" ]]; then
              cat >> deploy/docker-compose.yml << EOL
            web:
              image: ${{ steps.login-ecr.outputs.registry }}/lumixlabs/swift-web:${{ github.sha }}
              ports:
                - "3050:3050"
              restart: always
              volumes:
                - ./logs/web:/logs
              environment:
                - NODE_ENV=production
                - PORT=3050
              healthcheck:
                test: ["CMD", "wget", "--spider", "-q", "http://localhost:3050/"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 10s
              networks:
                - swift-network
          EOL
            fi
          done
          
          # Add networks section
          cat >> deploy/docker-compose.yml << EOL

          networks:
            swift-network:
              driver: bridge
          EOL
      
      - name: Configure SSH
        run: |
          if [ -z "${{ secrets.EC2_SSH_KEY }}" ]; then
            echo "Error: EC2_SSH_KEY secret is not set."
            exit 1
          fi
          
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2_key.pem
          chmod 600 ~/.ssh/ec2_key.pem
          echo -e "Host ec2\n\tHostName ${{ steps.parse-params.outputs.instance_ip }}\n\tUser ubuntu\n\tIdentityFile ~/.ssh/ec2_key.pem\n\tStrictHostKeyChecking no" > ~/.ssh/config
        
      - name: Deploy to EC2
        run: |
          # Get ECR password for Docker login on EC2
          AWS_ECR_PASSWORD=$(aws ecr get-login-password --region ${{ secrets.AWS_REGION }})
          
          # Copy files to EC2
          scp -r deploy/* ec2:~/
          scp .github/scripts/deploy-to-ec2.sh ec2:~/
          chmod +x .github/scripts/deploy-to-ec2.sh
          
          # Execute deploy script on EC2 with environment variables
          ssh ec2 "AWS_ECR_PASSWORD='$AWS_ECR_PASSWORD' AWS_ECR_REGISTRY='${{ steps.login-ecr.outputs.registry }}' ./deploy-to-ec2.sh"
      
      - name: Verify Deployment
        run: |
          # Give containers time to start up
          echo "Waiting for containers to start..."
          sleep 30
          
          # Verify services are running
          IFS=',' read -ra MODULES <<< "${{ steps.parse-params.outputs.modules_to_deploy }}"
          
          for MODULE in "${MODULES[@]}"; do
            if [[ "$MODULE" == "api" ]]; then
              echo "Checking API service..."
              ssh ec2 "curl -s http://localhost:4000/healthcheck || echo 'API service is not responding'"
            elif [[ "$MODULE" == "web" ]]; then
              echo "Checking Web service..."
              ssh ec2 "curl -s http://localhost:3050/ || echo 'Web service is not responding'"
            fi
          done

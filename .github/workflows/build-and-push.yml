name: Build and Push Docker Images

on:
  push:
    branches: [master, main]
    paths:
      - 'api/**'
      - 'web/**'
      - '.github/workflows/build-and-push.yml'
  workflow_dispatch:
    inputs:
      forceBuildApi:
        description: 'Force build of API image'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      forceBuildWeb:
        description: 'Force build of Web image'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  check-changes:
    name: Check Modified Modules
    runs-on: ubuntu-latest
    outputs:
      api_changed: ${{ steps.filter.outputs.api }}
      web_changed: ${{ steps.filter.outputs.web }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 50
      
      - name: Check for file changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            api:
              - 'api/**'
            web:
              - 'web/**'
  
  build-and-push:
    name: Build and Push Images
    needs: check-changes
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    strategy:
      matrix:
        module: [api, web]
        include:
          - module: api
            path: api
            repository: swift-api
          - module: web
            path: web
            repository: swift-web
    
    # Only run if module has changes or forced via workflow_dispatch
    if: |
      (needs.check-changes.outputs[format('{0}_changed', matrix.module)] == 'true') ||
      (github.event.inputs[format('forceBuild{0}', startsWith(matrix.module, 'a') && endsWith(matrix.module, 'i') ? 'Api' : 'Web')] == 'true')
    
    outputs:
      ${{ matrix.module }}_image_uri: ${{ steps.image-info.outputs.image_uri }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region $AWS_REGION
      
      - name: Login to Amazon ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          echo "registry=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com" >> $GITHUB_OUTPUT
      
      - name: Build and push Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ matrix.repository }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd ${{ matrix.path }}
          echo "Building ${{ matrix.module }} image from ${{ matrix.path }}"
          
          # Build the Docker image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          
          # Push the Docker image
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      
      - name: Output image URI
        id: image-info
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ matrix.repository }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

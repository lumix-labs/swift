name: Swift CI/CD Pipeline

on:
  push:
    branches: [master, main]
    paths:
      - "api/**"
      - "web/**"
      - "mcp-server/**"
      - "terraform/**"
      - ".github/workflows/**"
  workflow_dispatch:

jobs:
  check-changes:
    name: Check Modified Modules
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      api_changed: ${{ steps.filter.outputs.api }}
      web_changed: ${{ steps.filter.outputs.web }}
      terraform_changed: ${{ steps.filter.outputs.terraform }}
      github_changed: ${{ steps.filter.outputs.github }}
      modules_to_deploy: ${{ steps.set-modules.outputs.modules_to_deploy }}
      should_deploy_infra: ${{ steps.check-deploy.outputs.should_deploy_infra }}
      should_proceed_pipeline: ${{ steps.check-pipeline.outputs.should_proceed_pipeline }}
      any_module_changed: ${{ steps.check-module-changes.outputs.any_module_changed }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 50

      - name: Check for file changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            api:
              - 'api/**'
            web:
              - 'web/**'
            terraform:
              - 'terraform/**'
            github:
              - '.github/**'

      - name: Check if any module changed
        id: check-module-changes
        run: |
          if [[ "${{ steps.filter.outputs.api }}" == "true" || "${{ steps.filter.outputs.web }}" == "true" ]]; then
            echo "any_module_changed=true" >> $GITHUB_OUTPUT
            echo "At least one module has changes"
          else
            echo "any_module_changed=false" >> $GITHUB_OUTPUT
            echo "No module has changes"
          fi

      - name: Determine modules to deploy
        id: set-modules
        run: |
          MODULES=()
          echo "Change detection results:"
          echo "API changes: ${{ steps.filter.outputs.api }}"
          echo "Web changes: ${{ steps.filter.outputs.web }}"
          echo "Terraform changes: ${{ steps.filter.outputs.terraform }}"
          echo "GitHub workflow changes: ${{ steps.filter.outputs.github }}"

          # Add API module if it has changes
          if [[ "${{ steps.filter.outputs.api }}" == "true" ]]; then
            MODULES+=("api")
            echo "Adding API module for deployment due to changes"
          fi

          # Add Web module if it has changes
          if [[ "${{ steps.filter.outputs.web }}" == "true" ]]; then
            MODULES+=("web")
            echo "Adding Web module for deployment due to changes"
          fi

          # Always include API if nothing else is selected and we're not proceeding due to infra changes
          if [ ${#MODULES[@]} -eq 0 ]; then
            # Only include API as default if no infrastructure changes
            if [[ "${{ steps.filter.outputs.terraform }}" != "true" && "${{ steps.filter.outputs.github }}" != "true" ]]; then
              MODULES+=("api")
              echo "No modules detected for changes, defaulting to API module"
            else
              echo "Infrastructure changes only, not defaulting to API module"
            fi
          fi

          # Join array with commas
          MODULES_STR=$(IFS=,; echo "${MODULES[*]}")
          echo "modules_to_deploy=${MODULES_STR}" >> $GITHUB_OUTPUT
          echo "Modules to deploy: ${MODULES_STR}"

      - name: Check deployment conditions
        id: check-deploy
        run: |
          # Check if we should deploy infrastructure
          if [[ "${{ steps.filter.outputs.terraform }}" == "true" ]]; then
            echo "should_deploy_infra=true" >> $GITHUB_OUTPUT
            echo "Infrastructure changes detected, will deploy infra"
          else
            echo "should_deploy_infra=false" >> $GITHUB_OUTPUT
            echo "No infrastructure changes detected"
          fi

      - name: Check pipeline continuation
        id: check-pipeline
        run: |
          # Check if we should proceed with the pipeline regardless of module builds
          if [[ "${{ steps.filter.outputs.terraform }}" == "true" || "${{ steps.filter.outputs.github }}" == "true" ]]; then
            echo "should_proceed_pipeline=true" >> $GITHUB_OUTPUT
            echo "Infrastructure or workflow changes detected, will proceed with pipeline regardless of module builds"
          else
            echo "should_proceed_pipeline=false" >> $GITHUB_OUTPUT
            echo "No infrastructure or workflow changes detected, pipeline continuation depends on module builds"
          fi

  # Placeholder job to serve as a dependency for the pipeline-decision job
  # This ensures terraform job doesn't fail due to missing dependencies
  placeholder:
    name: Placeholder Job
    needs: [check-changes]
    runs-on: ubuntu-latest
    if: ${{ needs.check-changes.outputs.should_proceed_pipeline == 'true' && needs.check-changes.outputs.api_changed != 'true' && needs.check-changes.outputs.web_changed != 'true' }}
    steps:
      - name: Placeholder Step
        run: |
          echo "This job runs when we should proceed with the pipeline but no modules need to be built"
          echo "It ensures the pipeline continues even when builds are skipped"

  build-api:
    name: Build API Image
    needs: check-changes
    if: ${{ needs.check-changes.outputs.api_changed == true }}
    uses: ./.github/workflows/build-module.yml
    with:
      module: api
      repository: lumixlabs/swift-api
    secrets:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  build-web:
    name: Build WEB Image
    needs: check-changes
    if: ${{ needs.check-changes.outputs.web_changed == true }}
    uses: ./.github/workflows/build-module.yml
    with:
      module: web
      repository: lumixlabs/swift-web
    secrets:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  pipeline-decision:
    name: Pipeline Decision Point
    needs: [check-changes, build-api, build-web, placeholder]
    runs-on: ubuntu-latest
    if: always()
    outputs:
      continue_pipeline: ${{ steps.decide.outputs.continue_pipeline }}
    steps:
      - name: Decide whether to continue pipeline
        id: decide
        run: |
          echo "Build results:"
          echo "API Build: ${{ needs.build-api.result }}"
          echo "Web Build: ${{ needs.build-web.result }}"
          echo "Placeholder: ${{ needs.placeholder.result }}"
          echo "Infrastructure changes: ${{ needs.check-changes.outputs.should_deploy_infra }}"
          echo "GitHub workflow changes: ${{ needs.check-changes.outputs.github_changed }}"
          echo "Should proceed pipeline: ${{ needs.check-changes.outputs.should_proceed_pipeline }}"
          echo "Any module changed: ${{ needs.check-changes.outputs.any_module_changed }}"
          
          # Start with continue_pipeline=false
          continue_pipeline="false"

          # If any module build was successful, continue
          if [[ "${{ needs.build-api.result }}" == "success" || "${{ needs.build-web.result }}" == "success" ]]; then
            continue_pipeline="true"
            echo "At least one module was built successfully, continuing pipeline"
          fi

          # If placeholder job ran successfully, it means we should proceed without module builds
          if [[ "${{ needs.placeholder.result }}" == "success" ]]; then
            continue_pipeline="true"
            echo "Placeholder job successful - continuing pipeline without module builds"
          fi

          # If we should proceed pipeline due to infrastructure or workflow changes
          if [[ "${{ needs.check-changes.outputs.should_proceed_pipeline }}" == "true" ]]; then
            # Only check for failures in builds that actually ran (not skipped)
            should_continue=true
            
            # Check if api build ran and failed
            if [[ "${{ needs.build-api.result }}" == "failure" ]]; then
              should_continue=false
              echo "API module build failure detected"
            fi
            
            # Check if web build ran and failed
            if [[ "${{ needs.build-web.result }}" == "failure" ]]; then
              should_continue=false
              echo "Web module build failure detected"
            fi
            
            if [[ "$should_continue" == "true" ]]; then
              continue_pipeline="true"
              echo "Infrastructure or workflow changes detected, continuing pipeline"
            else
              echo "Module build failure detected, cannot continue pipeline"
              continue_pipeline="false"
            fi
          fi

          # Always write the value as a string
          echo "continue_pipeline=${continue_pipeline}" >> $GITHUB_OUTPUT
          echo "Pipeline continuation decision: ${continue_pipeline}"
          
          # Debug: Print the exact output value to ensure it's correctly set
          echo "Debug - GITHUB_OUTPUT value for continue_pipeline: $(cat $GITHUB_OUTPUT | grep continue_pipeline)"

  # Using a direct intermediate job rather than a reusable workflow
  terraform-setup:
    name: Terraform Preparation
    runs-on: ubuntu-latest
    needs: [pipeline-decision]
    if: ${{ needs.pipeline-decision.outputs.continue_pipeline == 'true' }}
    outputs:
      terraform_ready: ${{ steps.terraform-check.outputs.terraform_ready }}
    steps:
      - name: Verify pipeline decision
        id: terraform-check
        run: |
          echo "Pipeline decision: ${{ needs.pipeline-decision.outputs.continue_pipeline }}"
          echo "terraform_ready=true" >> $GITHUB_OUTPUT

  terraform:
    name: Terraform Operations
    needs: [terraform-setup, check-changes, pipeline-decision]
    if: ${{ needs.terraform-setup.outputs.terraform_ready == 'true' }}
    uses: ./.github/workflows/terraform-workflow.yml
    with:
      action: plan-apply
    secrets:
      TERRAFORM_API_TOKEN: ${{ secrets.TF_AUTH }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

  deploy:
    name: Deploy Application
    needs: [check-changes, pipeline-decision, terraform]
    if: ${{ needs.pipeline-decision.outputs.continue_pipeline == 'true' }}
    uses: ./.github/workflows/deploy.yml
    with:
      infrastructureParams: ${{ needs.terraform.outputs.infrastructure_params || '{}' }}
      modulesToDeploy: ${{ needs.check-changes.outputs.modules_to_deploy }}
    secrets:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      CONTAINER_IMAGE_API: ${{ secrets.CONTAINER_IMAGE_API }}
      CONTAINER_IMAGE_WEB: ${{ secrets.CONTAINER_IMAGE_WEB }}

  verify-deployment:
    name: Verify Deployment Status
    needs: [deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Check deployment status
        run: |
          if [ "${{ needs.deploy.outputs.deployment_status }}" == "failure" ]; then
            echo "Deployment failed with status: ${{ needs.deploy.outputs.deployment_status }}"
            echo "Please check the deployment logs for more details"
            exit 1
          else
            echo "Deployment completed successfully with status: ${{ needs.deploy.outputs.deployment_status }}"
          fi
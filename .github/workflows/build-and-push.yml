name: Swift CI/CD Pipeline

on:
  push:
    branches: [master, main, ak] # do not remove ak
    paths:
      - "api/**"
      - "web/**"
      - "terraform/**"
      - ".github/workflows/**"
  workflow_dispatch:
    inputs:
      forceBuildApi:
        description: "Force build of API image"
        required: false
        default: "false"
        type: choice
        options:
          - "true"
          - "false"
      forceBuildWeb:
        description: "Force build of Web image"
        required: false
        default: "false"
        type: choice
        options:
          - "true"
          - "false"
      forceInfraUpdate:
        description: "Force infrastructure update"
        required: false
        default: "false"
        type: choice
        options:
          - "true"
          - "false"
      skipDeployment:
        description: "Skip deployment step"
        required: false
        default: "false"
        type: choice
        options:
          - "true"
          - "false"
      skipTerraform:
        description: "Skip Terraform operations entirely"
        required: false
        default: "false"
        type: choice
        options:
          - "true"
          - "false"
      instanceIP:
        description: "Instance IP (used when skipping Terraform)"
        required: false
        default: ""
        type: string
      instanceID:
        description: "Instance ID (used when skipping Terraform)"
        required: false
        default: ""
        type: string

jobs:
  check-changes:
    name: Check Modified Modules
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      api_changed: ${{ steps.filter.outputs.api }}
      web_changed: ${{ steps.filter.outputs.web }}  # Enabled web builds
      terraform_changed: ${{ steps.filter.outputs.terraform }}
      modules_to_deploy: ${{ steps.set-modules.outputs.modules_to_deploy }}
      should_deploy_infra: ${{ steps.check-deploy.outputs.should_deploy_infra }}
      should_skip_deployment: ${{ steps.check-deploy.outputs.should_skip_deployment }}
      should_skip_terraform: ${{ steps.check-deploy.outputs.should_skip_terraform }}
      instance_ip: ${{ github.event.inputs.instanceIP }}
      instance_id: ${{ github.event.inputs.instanceID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 50

      - name: Check for file changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            api:
              - 'api/**'
            web:
              - 'web/**'
            terraform:
              - 'terraform/**'

      - name: Determine modules to deploy
        id: set-modules
        run: |
          MODULES=()
          
          # Check if API changed or force build requested
          if [[ "${{ steps.filter.outputs.api }}" == "true" || "${{ github.event.inputs.forceBuildApi }}" == "true" ]]; then
            MODULES+=("api")
          fi
          
          # Check if Web changed or force build requested
          if [[ "${{ steps.filter.outputs.web }}" == "true" || "${{ github.event.inputs.forceBuildWeb }}" == "true" ]]; then
            MODULES+=("web")
          fi
          
          # Join array with commas
          if [ ${#MODULES[@]} -gt 0 ]; then
            MODULES_STR=$(IFS=,; echo "${MODULES[*]}")
            echo "modules_to_deploy=${MODULES_STR}" >> $GITHUB_OUTPUT
          else
            echo "modules_to_deploy=" >> $GITHUB_OUTPUT
          fi

      - name: Check deployment conditions
        id: check-deploy
        run: |
          # Check if we should deploy infrastructure
          if [[ "${{ steps.filter.outputs.terraform }}" == "true" || "${{ github.event.inputs.forceInfraUpdate }}" == "true" || "${{ steps.set-modules.outputs.modules_to_deploy }}" != "" ]]; then
            echo "should_deploy_infra=true" >> $GITHUB_OUTPUT
          else
            echo "should_deploy_infra=false" >> $GITHUB_OUTPUT
          fi

          # Check if we should skip deployment
          if [[ "${{ github.event.inputs.skipDeployment }}" == "true" ]]; then
            echo "should_skip_deployment=true" >> $GITHUB_OUTPUT
          else
            echo "should_skip_deployment=false" >> $GITHUB_OUTPUT
          fi
          
          # Check if we should skip Terraform
          if [[ "${{ github.event.inputs.skipTerraform }}" == "true" ]]; then
            echo "should_skip_terraform=true" >> $GITHUB_OUTPUT
          else
            echo "should_skip_terraform=false" >> $GITHUB_OUTPUT
          fi

  build-api:
    name: Build API Image
    needs: check-changes
    if: needs.check-changes.outputs.api_changed == 'true' || github.event.inputs.forceBuildApi == 'true'
    uses: ./.github/workflows/build-module.yml
    with:
      module: api
      repository: lumixlabs/swift-api
    secrets:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  build-web:
    name: Build Web Image
    needs: check-changes
    if: needs.check-changes.outputs.web_changed == 'true' || github.event.inputs.forceBuildWeb == 'true'
    uses: ./.github/workflows/build-module.yml
    with:
      module: web
      repository: lumixlabs/swift-web
    secrets:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  terraform-plan:
    name: Terraform Plan
    needs: check-changes
    if: needs.check-changes.outputs.should_deploy_infra == 'true' && needs.check-changes.outputs.should_skip_terraform == 'false'
    uses: ./.github/workflows/terraform-workflow.yml
    with:
      action: plan
    secrets:
      TERRAFORM_API_TOKEN: ${{ secrets.TF_AUTH }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

  terraform-apply:
    name: Terraform Apply
    needs: [terraform-plan, check-changes]
    if: needs.terraform-plan.result == 'success' && needs.check-changes.outputs.should_skip_deployment == 'false' && needs.check-changes.outputs.should_skip_terraform == 'false'
    uses: ./.github/workflows/terraform-workflow.yml
    with:
      action: apply
    secrets:
      TERRAFORM_API_TOKEN: ${{ secrets.TF_AUTH }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

  deploy:
    name: Deploy Application
    # Add dependencies on all previous jobs
    needs: [terraform-apply, check-changes, build-api, build-web]
    # Adjust conditional to run only when required jobs succeed or were skipped
    if: >
      needs.check-changes.outputs.should_skip_deployment == 'false' &&
      needs.check-changes.outputs.modules_to_deploy != '' &&
      (needs.terraform-apply.result == 'success' || needs.terraform-apply.result == 'skipped' || needs.check-changes.outputs.should_skip_terraform == 'true') &&
      (needs.build-api.result == 'success' || needs.build-api.result == 'skipped') &&
      (needs.build-web.result == 'success' || needs.build-web.result == 'skipped')
    uses: ./.github/workflows/deploy.yml
    with:
      infrastructureParams: ${{ needs.check-changes.outputs.should_skip_terraform == 'true' && format('{"instance_ip":"%s","instance_id":"%s"}', needs.check-changes.outputs.instance_ip, needs.check-changes.outputs.instance_id) || needs.terraform-apply.outputs.infrastructure_params }}
      modulesToDeploy: ${{ needs.check-changes.outputs.modules_to_deploy }}
    secrets:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

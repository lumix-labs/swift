name: Terraform Workflow

on:
  workflow_call:
    inputs:
      action:
        required: true
        type: string
        description: 'Terraform action to perform (plan or apply)'
    outputs:
      infrastructure_params:
        description: "Infrastructure parameters as JSON"
        value: ${{ jobs.terraform.outputs.infrastructure_params }}
    secrets:
      TF_API_TOKEN:
        required: true

jobs:
  terraform:
    name: Terraform ${{ inputs.action }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    outputs:
      infrastructure_params: ${{ steps.extract-params.outputs.infrastructure_params }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: Debug variables.tf
        run: cat variables.tf

      - name: Debug backend.tf
        run: cat backend.tf

      # Initialize with -upgrade flag to ignore the lock file
      - name: Terraform Init
        id: init
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
          TF_LOG: DEBUG
        run: terraform init -input=false -upgrade

      - name: Debug after init failure
        if: failure()
        run: |
          echo "=== Terraform state debug ==="
          ls -la
          find . -name "*.tfstate*" -type f -exec ls -la {} \;
          find . -name "*.tflock*" -type f -exec ls -la {} \;
          echo "=== Terraform providers debug ==="
          terraform providers || echo "Cannot run providers command"
          echo "=== Terraform validate debug ==="
          terraform validate || echo "Cannot validate"

      - name: Terraform Plan
        if: inputs.action == 'plan'
        id: plan
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
        run: terraform plan

      - name: Terraform Apply
        if: inputs.action == 'apply'
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
        run: terraform apply -auto-approve

      - name: Extract Infrastructure Parameters
        if: inputs.action == 'apply'
        id: extract-params
        run: |
          # Create a JSON object with infrastructure parameters
          INFRASTRUCTURE_PARAMS=$(cat <<EOF
          {
            "instance_ip": "$(terraform output -json instance_public_ip 2>/dev/null | tr -d '"' || echo "")",
            "instance_id": "$(terraform output -json instance_id 2>/dev/null | tr -d '"' || echo "")"
          }
          EOF
          )
          
          # Escape JSON for GitHub Actions output
          INFRASTRUCTURE_PARAMS="${INFRASTRUCTURE_PARAMS//'%'/'%25'}"
          INFRASTRUCTURE_PARAMS="${INFRASTRUCTURE_PARAMS//$'\n'/'%0A'}"
          INFRASTRUCTURE_PARAMS="${INFRASTRUCTURE_PARAMS//$'\r'/'%0D'}"
          
          echo "infrastructure_params=${INFRASTRUCTURE_PARAMS}" >> $GITHUB_OUTPUT

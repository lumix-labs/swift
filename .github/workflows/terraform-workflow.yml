name: Terraform Workflow

on:
  workflow_call:
    inputs:
      action:
        required: true
        type: string
        description: "Terraform action to perform (plan or apply)"
    outputs:
      infrastructure_params:
        description: "Infrastructure parameters as JSON"
        value: ${{ jobs.terraform.outputs.infrastructure_params }}
    secrets:
      TERRAFORM_API_TOKEN:
        required: true
      SSH_PRIVATE_KEY:
        required: false

jobs:
  terraform:
    name: Terraform ${{ inputs.action }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    defaults:
      run:
        working-directory: ./terraform
    outputs:
      infrastructure_params: ${{ steps.extract-params.outputs.infrastructure_params }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
          cli_config_credentials_token: ${{ secrets.TERRAFORM_API_TOKEN }}
          terraform_wrapper: false

      - name: Setup SSH key
        run: |
          if [ -n "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "TF_VAR_ssh_private_key_content<<EOF" >> $GITHUB_ENV
            echo "${{ secrets.SSH_PRIVATE_KEY }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

      # Initialize with -upgrade flag to ignore the lock file
      - name: Terraform Init
        id: init
        env:
          TF_AUTH: ${{ secrets.TERRAFORM_API_TOKEN }}
          TF_LOG: DEBUG
        run: terraform init -input=false -upgrade

      - name: Debug terraform state on init
        run: |
          echo "=== Terraform state info after init ==="
          ls -la
          find . -name "*.tfstate*" -type f -exec ls -la {} \;
          find . -name "*.tflock*" -type f -exec ls -la {} \;
          echo "=== Terraform providers ==="
          terraform providers
          echo "=== Terraform validation ==="
          terraform validate

      - name: Debug module structure
        run: |
          echo "=== Module structure ==="
          ls -la modules
          ls -la modules/compute || echo "No compute module directory"
          ls -la modules/networking || echo "No networking module directory"
          
          echo "=== Module outputs ==="
          echo "Computing module outputs:"
          grep -r "output" modules/compute/ || echo "No compute module outputs found"
          echo "Networking module outputs:"
          grep -r "output" modules/networking/ || echo "No networking module outputs found"

      - name: Terraform Plan
        if: inputs.action == 'plan'
        id: plan
        env:
          TF_AUTH: ${{ secrets.TERRAFORM_API_TOKEN }}
        run: terraform plan

      - name: Terraform Apply
        if: inputs.action == 'apply'
        id: apply
        env:
          TF_AUTH: ${{ secrets.TERRAFORM_API_TOKEN }}
        run: terraform apply -auto-approve

      # Enhanced parameter extraction with validation
      - name: Extract Infrastructure Parameters
        if: inputs.action == 'apply'
        id: extract-params
        run: |
          echo "=== Terraform Show ==="
          terraform show || echo "Failed to show terraform state"
          
          echo "=== Terraform State List ==="
          terraform state list || echo "Failed to list terraform state"
          
          echo "=== Terraform Output ==="
          terraform output || echo "Failed to get terraform outputs"
          
          # Extract values individually using -raw to avoid JSON formatting issues
          echo "Attempting to extract instance_public_ip..."
          INSTANCE_IP=$(terraform output -raw instance_public_ip 2>&1) || true
          echo "Raw output for instance_public_ip: '$INSTANCE_IP'"
          
          echo "Attempting to extract instance_id..."
          INSTANCE_ID=$(terraform output -raw instance_id 2>&1) || true
          echo "Raw output for instance_id: '$INSTANCE_ID'"
          
          # Look for error messages
          if [[ "$INSTANCE_IP" == *"Error"* ]] || [[ "$INSTANCE_ID" == *"Error"* ]]; then
            echo "Error detected in terraform output. Checking compute module outputs..."
            grep -r "output" --include="*.tf" .
          fi
          
          # Clean up error messages and ensure we have usable values
          if [[ "$INSTANCE_IP" == *"Error"* ]] || [ -z "$INSTANCE_IP" ]; then
            echo "Error or empty value for instance_public_ip. Setting to fallback value."
            INSTANCE_IP="fallback_ip_for_pipeline_continuity"
          fi
          
          if [[ "$INSTANCE_ID" == *"Error"* ]] || [ -z "$INSTANCE_ID" ]; then
            echo "Error or empty value for instance_id. Setting to fallback value."
            INSTANCE_ID="fallback_id_for_pipeline_continuity"
          fi
          
          # Create compact single-line JSON without newlines or special characters
          INFRASTRUCTURE_PARAMS="{\"instance_ip\":\"$INSTANCE_IP\",\"instance_id\":\"$INSTANCE_ID\"}"

          echo "infrastructure_params=$INFRASTRUCTURE_PARAMS" >> $GITHUB_OUTPUT
          
          # Ensure this step makes output visible in workflow logs
          echo "Extracted infrastructure parameters: $INFRASTRUCTURE_PARAMS"
          
          # Fail the job if we're using fallback values to stop the pipeline
          if [[ "$INSTANCE_IP" == "fallback_ip_for_pipeline_continuity" ]] || [[ "$INSTANCE_ID" == "fallback_id_for_pipeline_continuity" ]]; then
            echo "ERROR: Failed to extract valid infrastructure parameters from Terraform output."
            echo "This indicates that infrastructure resources were not properly created."
            echo "Failing the job to prevent downstream deploy steps from proceeding."
            exit 1
          fi

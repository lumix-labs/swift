name: "Create Docker Compose File"
description: "Creates a docker-compose.yml file based on modules to deploy"

inputs:
  registry:
    description: "ECR registry URL"
    required: true
  modules_to_deploy:
    description: "Comma-separated list of modules to deploy"
    required: true
  container_image_api:
    description: "Full image URI for API container"
    required: false
  container_image_web:
    description: "Full image URI for web container"
    required: false

runs:
  using: "composite"
  steps:
    - name: Create docker-compose file
      shell: bash
      run: |
        mkdir -p deploy

        # Copy the root docker-compose file instead of using a template
        cp ${{ github.workspace }}/.github/workflows/templates/docker-compose.yml deploy/docker-compose.yml

        # Print debug info for better visibility
        echo "Registry value: ${{ inputs.registry }}"
        echo "Modules to deploy: ${{ inputs.modules_to_deploy }}"
        echo "API container image: ${{ inputs.container_image_api }}"
        echo "Web container image: ${{ inputs.container_image_web }}"

        # Process the docker-compose file
        # Map module names to service names in docker-compose.yml
        declare -A MODULE_MAP
        MODULE_MAP["api"]="api-server"
        MODULE_MAP["web"]="web"

        # Map module names to their full container images
        declare -A IMAGE_MAP
        if [ -n "${{ inputs.container_image_api }}" ]; then
          IMAGE_MAP["api-server"]="${{ inputs.container_image_api }}"
        else
          IMAGE_MAP["api-server"]="${{ inputs.registry }}/lumixlabs/swift-api:latest"
        fi

        if [ -n "${{ inputs.container_image_web }}" ]; then
          IMAGE_MAP["web"]="${{ inputs.container_image_web }}"
        else
          IMAGE_MAP["web"]="${{ inputs.registry }}/lumixlabs/swift-web:latest"
        fi

        # Replace build instructions with specific image references
        for SERVICE in "${!IMAGE_MAP[@]}"; do
          # Create a sed pattern to replace the build section with image reference
          IMAGE="${IMAGE_MAP[$SERVICE]}"
          echo "Setting $SERVICE to use image: $IMAGE"
          
          # Create a temporary file with the service section
          grep -n "^  $SERVICE:" deploy/docker-compose.yml | cut -d: -f1 > /tmp/line_num.txt
          START_LINE=$(cat /tmp/line_num.txt)
          
          if [ -n "$START_LINE" ]; then
            # Find the next service or the end of the file
            NEXT_LINE=$(awk -v start="$START_LINE" 'NR > start && /^  [a-zA-Z0-9]/ {print NR; exit}' deploy/docker-compose.yml)
            
            if [ -z "$NEXT_LINE" ]; then
              # If no next service, go until networks or volumes section
              NEXT_LINE=$(awk -v start="$START_LINE" 'NR > start && /^[a-zA-Z0-9]/ {print NR; exit}' deploy/docker-compose.yml)
            fi
            
            # Create a pattern to match the build section within this service
            sed -i "${START_LINE},${NEXT_LINE}s|build:[^}]*dockerfile: Dockerfile[^}]*|image: \"${IMAGE}\"|" deploy/docker-compose.yml
          else
            echo "Warning: Could not find service $SERVICE in docker-compose.yml"
          fi
        done

        # If specific modules were specified, modify docker-compose.yml to exclude others
        if [ -n "${{ inputs.modules_to_deploy }}" ]; then
          echo "Creating docker-compose.yml with modules: ${{ inputs.modules_to_deploy }}"
          
          IFS=',' read -ra MODULES <<< "${{ inputs.modules_to_deploy }}"
          ALL_SERVICES=("api-server" "web")
          SERVICES_TO_KEEP=()
          
          # Map workflow module names to docker-compose service names
          for MODULE in "${MODULES[@]}"; do
            if [[ -n "${MODULE_MAP[$MODULE]}" ]]; then
              SERVICES_TO_KEEP+=("${MODULE_MAP[$MODULE]}")
              echo "Including service ${MODULE_MAP[$MODULE]} for module $MODULE"
            else
              echo "Warning: Unknown module '$MODULE', no mapping defined"
            fi
          done
          
          # Find services to remove from docker-compose
          for SERVICE in "${ALL_SERVICES[@]}"; do
            if [[ ! " ${SERVICES_TO_KEEP[*]} " =~ " ${SERVICE} " ]]; then
              echo "Removing service $SERVICE from docker-compose.yml"
              # Using a more robust approach to remove services
              awk -v service="^  ${SERVICE}:" '
              BEGIN { skip=0; }
              $0 ~ service { skip=1; }
              skip && $0 ~ "^  [a-zA-Z0-9]" { skip=0; }
              !skip { print $0; }
              ' deploy/docker-compose.yml > deploy/temp.yml && mv deploy/temp.yml deploy/docker-compose.yml
            fi
          done
        fi
          
        # Display final docker-compose file for debugging
        echo "==== Final docker-compose.yml content ===="
        cat deploy/docker-compose.yml
        echo "==========================================="

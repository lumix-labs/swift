name: "Create Docker Compose File"
description: "Creates a docker-compose.yml file based on modules to deploy"

inputs:
  registry:
    description: "ECR registry URL"
    required: true
  modules_to_deploy:
    description: "Comma-separated list of modules to deploy"
    required: true
  container_image_api:
    description: "Full image URI for API container"
    required: false
  container_image_web:
    description: "Full image URI for web container"
    required: false

runs:
  using: "composite"
  steps:
    - name: Create docker-compose file
      shell: bash
      run: |
        mkdir -p deploy

        # Copy from template
        cp ${{ github.action_path }}/../templates/docker-compose.yml deploy/docker-compose.yml

        # Replace dockerfile placeholders with secrets
        sed -i 's|dockerfile: CONTAINER_IMAGE_WEB|dockerfile: ${{ secrets.CONTAINER_IMAGE_WEB }}|g' deploy/docker-compose.yml
        sed -i 's|dockerfile: CONTAINER_IMAGE_API|dockerfile: ${{ secrets.CONTAINER_IMAGE_API }}|g' deploy/docker-compose.yml

        # Map module names to service names in docker-compose.yml
        declare -A MODULE_MAP
        MODULE_MAP["api"]="api-server"
        MODULE_MAP["web"]="web"

        # If specific modules were specified, modify docker-compose.yml to exclude others
        if [ -n "${{ inputs.modules_to_deploy }}" ]; then
          echo "Creating docker-compose.yml with modules: ${{ inputs.modules_to_deploy }}"
          
          IFS=',' read -ra MODULES <<< "${{ inputs.modules_to_deploy }}"
          ALL_SERVICES=("api-server" "web")
          SERVICES_TO_KEEP=()
          
          # Map workflow module names to docker-compose service names
          for MODULE in "${MODULES[@]}"; do
            if [[ -n "${MODULE_MAP[$MODULE]}" ]]; then
              SERVICES_TO_KEEP+=("${MODULE_MAP[$MODULE]}")
              echo "Including service ${MODULE_MAP[$MODULE]} for module $MODULE"
            else
              echo "Warning: Unknown module '$MODULE', no mapping defined"
            fi
          done
          
          # Find services to remove from docker-compose
          for SERVICE in "${ALL_SERVICES[@]}"; do
            if [[ ! " ${SERVICES_TO_KEEP[*]} " =~ " ${SERVICE} " ]]; then
              echo "Removing service $SERVICE from docker-compose.yml"
              # Using a more robust approach to remove services
              awk -v service="^  ${SERVICE}:" '
              BEGIN { skip=0; }
              $0 ~ service { skip=1; }
              skip && $0 ~ "^  [a-zA-Z0-9]" { skip=0; }
              !skip { print $0; }
              ' deploy/docker-compose.yml > deploy/temp.yml && mv deploy/temp.yml deploy/docker-compose.yml
            fi
          done
        fi
          
        # Display final docker-compose file for debugging
        echo "==== Final docker-compose.yml content ===="
        cat deploy/docker-compose.yml
        echo "==========================================="
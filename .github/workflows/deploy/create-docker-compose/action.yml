name: 'Create Docker Compose File'
description: 'Creates a docker-compose.yml file based on modules to deploy'

inputs:
  registry:
    description: 'ECR registry URL'
    required: true
  modules_to_deploy:
    description: 'Comma-separated list of modules to deploy'
    required: true

runs:
  using: "composite"
  steps:
    - name: Create docker-compose file
      shell: bash
      run: |
        mkdir -p deploy
        
        # Create docker-compose.yml content
        cat > deploy/docker-compose.yml << EOL
        version: '3'

        services:
        EOL
        
        # Convert comma-separated modules to array
        IFS=',' read -ra MODULES <<< "${{ inputs.modules_to_deploy }}"
        
        # Add each module to docker-compose
        for MODULE in "${MODULES[@]}"; do
          if [[ "$MODULE" == "api" ]]; then
            cat >> deploy/docker-compose.yml << EOL
          api:
            image: ${{ inputs.registry }}/lumixlabs/swift-api:${{ github.sha }}
            ports:
              - "4000:4000"
            restart: always
            volumes:
              - /app/logs/api:/logs
            environment:
              - NODE_ENV=production
              - PORT=4000
            healthcheck:
              test: ["CMD", "wget", "--spider", "-q", "http://localhost:4000/healthcheck"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 10s
            networks:
              - swift-network
        EOL
          elif [[ "$MODULE" == "web" ]]; then
            cat >> deploy/docker-compose.yml << EOL
          web:
            image: ${{ inputs.registry }}/lumixlabs/swift-web:${{ github.sha }}
            ports:
              - "80:80"
            restart: always
            volumes:
              - /app/logs/web:/logs
            environment:
              - NODE_ENV=production
              - PORT=80
            healthcheck:
              test: ["CMD", "wget", "--spider", "-q", "http://localhost:80/"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 10s
            networks:
              - swift-network
        EOL
          fi
        done
        
        # Add networks section
        cat >> deploy/docker-compose.yml << EOL

        networks:
          swift-network:
            driver: bridge
        EOL
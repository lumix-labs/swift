name: Infrastructure Deployment

on:
  push:
    branches: [master, main]
    paths:
      - "api/**"
      - "web/**"
      - "mcp-server/**"
      - "terraform/**"
      - ".github/workflows/**"
  workflow_dispatch:
    inputs:
      forceInfraUpdate:
        description: "Force infrastructure update"
        required: false
        default: "false"
        type: choice
        options:
          - "true"
          - "false"

jobs:
  check-module-changes:
    name: Check Module Changes
    runs-on: ubuntu-latest
    outputs:
      api_changed: ${{ steps.filter.outputs.api }}
      web_changed: ${{ steps.filter.outputs.web }}
      mcp_server_changed: ${{ steps.filter.outputs.mcp_server }}
      terraform_changed: ${{ steps.filter.outputs.terraform }}
      modules_to_deploy: ${{ steps.set-modules.outputs.modules_to_deploy }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 50

      - name: Check for file changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            api:
              - 'api/**'
            web:
              - 'web/**'
            mcp_server:
              - 'mcp-server/**'
            terraform:
              - 'terraform/**'

      - name: Determine modules to deploy
        id: set-modules
        run: |
          MODULES=()
          
          if [[ "${{ steps.filter.outputs.api }}" == "true" ]]; then
            MODULES+=("api")
          fi
          
          if [[ "${{ steps.filter.outputs.web }}" == "true" ]]; then
            MODULES+=("web")
          fi
          
          if [[ "${{ steps.filter.outputs.mcp_server }}" == "true" ]]; then
            MODULES+=("mcp-server")
          fi
          
          # Join array with commas
          if [ ${#MODULES[@]} -gt 0 ]; then
            MODULES_STR=$(IFS=,; echo "${MODULES[*]}")
            echo "modules_to_deploy=${MODULES_STR}" >> $GITHUB_OUTPUT
          else
            echo "modules_to_deploy=" >> $GITHUB_OUTPUT
          fi

  build-images:
    name: Build Docker Images
    needs: check-module-changes
    if: ${{ needs.check-module-changes.outputs.modules_to_deploy != '' || github.event.inputs.forceInfraUpdate == 'true' }}
    strategy:
      matrix:
        module: ${{ fromJSON(format('["%s"]', join('","', split(needs.check-module-changes.outputs.modules_to_deploy, ',')))) }}
    uses: ./.github/workflows/build-module.yml
    with:
      module: ${{ matrix.module }}
      repository: lumixlabs/swift-${{ matrix.module }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

  terraform-plan:
    name: Terraform Plan
    needs: [check-module-changes, build-images]
    if: ${{ always() && (needs.check-module-changes.outputs.modules_to_deploy != '' || needs.check-module-changes.outputs.terraform_changed == 'true' || github.event.inputs.forceInfraUpdate == 'true') }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    outputs:
      deployment_params: ${{ steps.extract-params.outputs.deployment_params }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6

      - name: Configure AWS credentials
        uses: ./.github/workflows/actions/configure-aws
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Create tfvars file
        run: |
          # Create terraform.tfvars from example and secrets
          cp terraform.tfvars.example terraform.tfvars
          
          # Update with repository values
          if [[ -n "${{ needs.check-module-changes.outputs.modules_to_deploy }}" ]]; then
            modules=($(echo "${{ needs.check-module-changes.outputs.modules_to_deploy }}" | tr ',' ' '))
            for module in "${modules[@]}"; do
              if [[ "$module" == "api" ]]; then
                echo "container_image_api=\"${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/lumixlabs/swift-api:${{ github.sha }}\"" >> terraform.tfvars
              elif [[ "$module" == "web" ]]; then
                echo "container_image_web=\"${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/lumixlabs/swift-web:${{ github.sha }}\"" >> terraform.tfvars
              elif [[ "$module" == "mcp-server" ]]; then
                echo "container_image_mcp=\"${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/lumixlabs/swift-mcp-server:${{ github.sha }}\"" >> terraform.tfvars
              fi
            done
          fi
          
          # Add other secrets
          if [ -n "${{ secrets.CLOUDFLARE_API_TOKEN }}" ]; then
            echo "cloudflare_api_token=\"${{ secrets.CLOUDFLARE_API_TOKEN }}\"" >> terraform.tfvars
          fi
          
          if [ -n "${{ secrets.CLOUDFLARE_ZONE_ID }}" ]; then
            echo "cloudflare_zone_id=\"${{ secrets.CLOUDFLARE_ZONE_ID }}\"" >> terraform.tfvars
          fi
          
          if [ -n "${{ secrets.DOMAIN_NAME }}" ]; then
            echo "domain_name=\"${{ secrets.DOMAIN_NAME }}\"" >> terraform.tfvars
          fi

      - name: Terraform Plan
        id: plan
        run: terraform plan -out=tfplan

      - name: Extract Deployment Parameters
        id: extract-params
        run: |
          # Create a JSON object with deployment parameters
          DEPLOYMENT_PARAMS=$(cat <<EOF
          {
            "instance_ip": "$(terraform output -json instance_public_ip | tr -d '"')",
            "api_endpoint": "$(terraform output -json api_endpoint | tr -d '"')",
            "web_endpoint": "$(terraform output -json web_endpoint | tr -d '"')",
            "modules_to_deploy": "${{ needs.check-module-changes.outputs.modules_to_deploy }}"
          }
          EOF
          )
          
          # Escape JSON for GitHub Actions output
          DEPLOYMENT_PARAMS="${DEPLOYMENT_PARAMS//'%'/'%25'}"
          DEPLOYMENT_PARAMS="${DEPLOYMENT_PARAMS//$'\n'/'%0A'}"
          DEPLOYMENT_PARAMS="${DEPLOYMENT_PARAMS//$'\r'/'%0D'}"
          
          echo "deployment_params=${DEPLOYMENT_PARAMS}" >> $GITHUB_OUTPUT

      - name: Save Plan
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan
          path: terraform/tfplan
          retention-days: 5

  terraform-apply:
    name: Terraform Apply
    needs: [terraform-plan]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    outputs:
      deployment_params: ${{ needs.terraform-plan.outputs.deployment_params }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6

      - name: Configure AWS credentials
        uses: ./.github/workflows/actions/configure-aws
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Download Plan
        uses: actions/download-artifact@v3
        with:
          name: terraform-plan
          path: terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

name: Infrastructure Deployment

on:
  push:
    branches: [master, main, ak]
    paths:
      - "api/**"
      - "web/**"
      - "mcp-server/**"
      - "terraform/**"
      - ".github/workflows/**"
  workflow_call:
    inputs:
      forceInfraUpdate:
        required: false
        type: string
        default: "false"
        description: "Force infrastructure update"
    outputs:
      deployment_params:
        description: "Deployment parameters as JSON"
        value: ${{ jobs.terraform-apply.outputs.deployment_params }}
  workflow_dispatch:
    inputs:
      forceInfraUpdate:
        description: "Force infrastructure update"
        required: false
        default: "false"
        type: choice
        options:
          - "true"
          - "false"

jobs:
  check-module-changes:
    name: Check Module Changes
    runs-on: ubuntu-latest
    outputs:
      api_changed: ${{ steps.filter.outputs.api }}
      web_changed: ${{ steps.filter.outputs.web }}
      mcp_server_changed: ${{ steps.filter.outputs.mcp_server }}
      terraform_changed: ${{ steps.filter.outputs.terraform }}
      modules_to_deploy: ${{ steps.set-modules.outputs.modules_to_deploy }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 50

      - name: Check for file changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            api:
              - 'api/**'
            web:
              - 'web/**'
            mcp_server:
              - 'mcp-server/**'
            terraform:
              - 'terraform/**'

      - name: Determine modules to deploy
        id: set-modules
        run: |
          MODULES=()
          
          if [[ "${{ steps.filter.outputs.api }}" == "true" ]]; then
            MODULES+=("api")
          fi
          
          if [[ "${{ steps.filter.outputs.web }}" == "true" ]]; then
            MODULES+=("web")
          fi
          
          if [[ "${{ steps.filter.outputs.mcp_server }}" == "true" ]]; then
            MODULES+=("mcp-server")
          fi
          
          # Join array with commas
          if [ ${#MODULES[@]} -gt 0 ]; then
            MODULES_STR=$(IFS=,; echo "${MODULES[*]}")
            echo "modules_to_deploy=${MODULES_STR}" >> $GITHUB_OUTPUT
          else
            echo "modules_to_deploy=" >> $GITHUB_OUTPUT
          fi

  build-images:
    name: Build Docker Images
    needs: check-module-changes
    if: ${{ needs.check-module-changes.outputs.modules_to_deploy != '' || inputs.forceInfraUpdate == 'true' || github.event.inputs.forceInfraUpdate == 'true' }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: ./.github/workflows/actions/configure-aws
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: ./.github/workflows/actions/ecr-login
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-account-id: ${{ secrets.AWS_ACCOUNT_ID }}
      
      - name: Build and push modules
        run: |
          # Get list of modules to deploy
          IFS=',' read -ra MODULES <<< "${{ needs.check-module-changes.outputs.modules_to_deploy }}"
          
          # Build and push each module
          for MODULE in "${MODULES[@]}"; do
            echo "Building and pushing $MODULE module..."
            
            # Create ECR repository if it doesn't exist
            REPO_NAME="lumixlabs/swift-$MODULE"
            aws ecr create-repository --repository-name $REPO_NAME || true
            
            # Build and push Docker image
            cd $MODULE
            docker build -t ${{ steps.login-ecr.outputs.registry }}/$REPO_NAME:${{ github.sha }} -t ${{ steps.login-ecr.outputs.registry }}/$REPO_NAME:latest .
            docker push ${{ steps.login-ecr.outputs.registry }}/$REPO_NAME:${{ github.sha }}
            docker push ${{ steps.login-ecr.outputs.registry }}/$REPO_NAME:latest
            cd ..
          done

  terraform-plan:
    name: Terraform Plan
    needs: [check-module-changes, build-images]
    if: ${{ always() && (needs.check-module-changes.outputs.modules_to_deploy != '' || needs.check-module-changes.outputs.terraform_changed == 'true' || inputs.forceInfraUpdate == 'true' || github.event.inputs.forceInfraUpdate == 'true') }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6

      - name: Configure AWS credentials
        uses: ./.github/workflows/actions/configure-aws
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Create tfvars file
        run: |
          # Create terraform.tfvars from example and secrets
          cp terraform.tfvars.example terraform.tfvars
          
          # Add other secrets
          if [ -n "${{ secrets.CLOUDFLARE_API_TOKEN }}" ]; then
            echo "cloudflare_api_token=\"${{ secrets.CLOUDFLARE_API_TOKEN }}\"" >> terraform.tfvars
          fi
          
          if [ -n "${{ secrets.CLOUDFLARE_ZONE_ID }}" ]; then
            echo "cloudflare_zone_id=\"${{ secrets.CLOUDFLARE_ZONE_ID }}\"" >> terraform.tfvars
          fi
          
          if [ -n "${{ secrets.DOMAIN_NAME }}" ]; then
            echo "domain_name=\"${{ secrets.DOMAIN_NAME }}\"" >> terraform.tfvars
          fi

      - name: Terraform Plan
        id: plan
        run: terraform plan -out=tfplan

      - name: Save Plan
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan
          path: terraform/tfplan
          retention-days: 5

  terraform-apply:
    name: Terraform Apply
    needs: [terraform-plan, check-module-changes]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    outputs:
      deployment_params: ${{ steps.extract-params.outputs.deployment_params }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6

      - name: Configure AWS credentials
        uses: ./.github/workflows/actions/configure-aws
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Download Plan
        uses: actions/download-artifact@v3
        with:
          name: terraform-plan
          path: terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

      - name: Extract Deployment Parameters
        id: extract-params
        run: |
          # Ensure infrastructure is applied before extracting outputs
          sleep 10

          # Check if outputs exist
          if terraform output -json instance_public_ip >/dev/null 2>&1; then
            # Create a JSON object with deployment parameters
            DEPLOYMENT_PARAMS=$(cat <<EOF
            {
              "instance_ip": "$(terraform output -json instance_public_ip | tr -d '"')",
              "api_endpoint": "$(terraform output -json api_endpoint | tr -d '"')",
              "web_endpoint": "$(terraform output -json web_endpoint | tr -d '"')",
              "modules_to_deploy": "${{ needs.check-module-changes.outputs.modules_to_deploy }}"
            }
            EOF
            )
          else
            # Fallback if outputs don't exist
            DEPLOYMENT_PARAMS=$(cat <<EOF
            {
              "instance_ip": "",
              "api_endpoint": "",
              "web_endpoint": "",
              "modules_to_deploy": "${{ needs.check-module-changes.outputs.modules_to_deploy }}"
            }
            EOF
            )
          fi
          
          # Escape JSON for GitHub Actions output
          DEPLOYMENT_PARAMS="${DEPLOYMENT_PARAMS//'%'/'%25'}"
          DEPLOYMENT_PARAMS="${DEPLOYMENT_PARAMS//$'\n'/'%0A'}"
          DEPLOYMENT_PARAMS="${DEPLOYMENT_PARAMS//$'\r'/'%0D'}"
          
          echo "deployment_params=${DEPLOYMENT_PARAMS}" >> $GITHUB_OUTPUT
